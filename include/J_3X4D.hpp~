

#ifndef H_3x4D_HPP_
#define H_3x4D_HPP_

#include <eigen2/Eigen/Core>
#include <math.h>

Eigen::MatrixXd J_3x4D(Eigen::Vector4d x) /* x denoted the four joint positions */
{

Eigen::MatrixXd J(3,4);

J(0,0)= 9*(cos(x[3]) * (cos(x[0])*sin(x[2]) - cos(x[0])*sin(x[2])) - sin(x[0])*sin(x[1])*sin(x[3]) - cos(x[1])*cos(x[2])*sin(x[0]))+
cos(x[1])*cos(x[2])*sin(x[0]) - 110*sin(x[0])*sin(x[1]) ;
J(0,0)/=200;

J(0,1)= (110*cos(x[0])*cos(x[1])) - 9*(cos(x[0])*cos(x[2])*sin(x[1]) +
cos(x[0])*cos(x[1])*sin(x[3]) + cos(x[0])*cos(x[2])*cos(x[3])*sin(x[1]));
J(0,1)/=200;

J(0,2)= 9*(cos(x[3])*(cos(x[2])*sin(x[0]) - ((cos(x[2])*sin(x[0])))))+
cos(x[0])*cos(x[1])*sin(x[2])  - (cos(x[0])*cos(x[1])*sin(x[2]));
J(0,2)/=200;

J(0,3)= (9*cos(x[0])*cos(x[3])*sin(x[1]))/200 - (9*sin(x[3])*(sin(x[0])*sin(x[2]) -
cos(x[0])*cos(x[1])*cos(x[2])))/200;
 
J(1,0)= (110*cos(x[0])*sin(x[1]))   - cos(x[0])*cos(x[1])*cos(x[2]) +
9*(cos(x[3])*(sin(x[0])*sin(x[2])- sin(x[0])*sin(x[2])+
cos(x[0])*sin(x[1])*sin(x[3])) + cos(x[0])*cos(x[1])*cos(x[2]));
J(1,0)/=200;

J(1,1)= (110*cos(x[1])*sin(x[0])) - 9*(cos(x[2])*sin(x[0])*sin(x[1]) +
cos(x[1])*sin(x[0])*sin(x[3]) + cos(x[2])*cos(x[3])*sin(x[0])*sin(x[1]));
J(1,1)/=200;

J(1,2)= 9*((cos(x[0])*cos(x[2])) - cos(x[3])*(cos(x[0])*cos(x[2] -
cos(x[1])*sin(x[0])*sin(x[2]))))- cos(x[1])*sin(x[0])*sin(x[2]) ;
J(1,3)= (9*sin(x[3])*(cos(x[0])*sin(x[2]) + cos(x[1])*cos(x[2])*sin(x[0])))/200 +
(9*cos(x[3])*sin(x[0])*sin(x[1]))/200;
 
J(2,0)=0;

J(2,1)= 9*(cos(x[1])*cos(x[2])*cos(x[3]) - cos(x[1])*cos(x[2]) -
sin(x[1])*sin(x[3])) - (110*sin(x[1]));
J(2,1)/=200;

J(2,2)= 9*(sin(x[1])*sin(x[2]) - cos(x[3])*sin(x[1])*sin(x[2]));
J(2,2)/=200;

J(2,3)= 9*(cos(x[1])*cos(x[3]) - cos(x[2])*sin(x[1])*sin(x[3]));
J(2,3)/=200;

return J;

}


#endif
